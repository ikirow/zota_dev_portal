/**
 * Strips the unit from a given number-unit-combination and returns the number.
 * @link: http://stackoverflow.com/a/12335841/1779999
 * @usage: parse-int(10px) => 10
 */
/**
 * Simply adds the em unit to a given number. This is used twice in the
 * function underneath, thus the need for a separate function.
 */
/**
 * Calculates em values for a given list of (px or em) values and a given em
 * base. Multiply base values for nested em structures (last @usage example).
 * @usage: em(10px, 1.125) => .55556em
 *         em(24px, .875em) => 1.71429em
 *         em(12px 0 7em rgba(0, 0, 0, .7), 1.75) => .42857em 0 4em rgba(0, 0, 0, 0.7)
 *         em(12px) + em(3em) => 3.75em
 *         em(23px, em(53px)) => .43396em
 *         em(24px, 1.5 * 1.125) => .88889em
 */
.block-example {
  background: #0EC997; }

/*# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2Fzc2V0cy9zYXNzL3ZhcmlhYmxlcy9fdHlwb2dyYXBoeS5zY3NzIiwiYmxvY2stZXhhbXBsZS5jc3MiLCJibG9jay1leGFtcGxlLnNjc3MiLCIuLi8uLi8uLi9hc3NldHMvc2Fzcy92YXJpYWJsZXMvX2NvbG9ycy5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQStEQTs7OztFQzNERTtBRHFFRjs7O0VDakVFO0FEMEVGOzs7Ozs7Ozs7RUNoRUU7QUNmRjtFQUNFLG1CQ3lCYSxFQUFBIiwiZmlsZSI6ImJsb2NrLWV4YW1wbGUuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gIEZvbnRzIGFuZCBpY29uc1xuLy8gIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbi8vIE1peGluIGZvciBhZGRpbmcgY3VzdG9tIGZvbnRzIGluIHRoZSBkaXIgL2ZvbnRzL2ZvbnRmb2xkZXJuYW1lL2ZvbnQtcmVndWxhclxuLy8gZXhhbXBsZSAvZm9udHMvYXZlcnRhL2F2ZXJ0YS1ib2xkLndvZmZcbi8vIGV4YW1wbGUgL2ZvbnRzL2F2ZXJ0YS9hdmVydGEtcmVndWxhci53b2ZmXG5cbkBtaXhpbiBmb250ZGVmKCRwYXRoLCAkZmlsZW5hbWUsICR2ZXJzaW9uLCAkdHlwZTpcIlJlZ3VsYXJcIikge1xuICBzcmM6IHVybChcIi4uL2ZvbnRzLyN7JHBhdGh9LyN7JGZpbGVuYW1lfS0jeyR0eXBlfS5lb3Q/I2llZml4JnY9I3skdmVyc2lvbn1cIikgZm9ybWF0KFwiZW1iZWRkZWQtb3BlbnR5cGVcIiksXG4gIHVybChcIi4uL2ZvbnRzLyN7JHBhdGh9LyN7JGZpbGVuYW1lfS0jeyR0eXBlfS53b2ZmP3Y9I3skdmVyc2lvbn1cIikgZm9ybWF0KFwid29mZlwiKSxcbiAgdXJsKFwiLi4vZm9udHMvI3skcGF0aH0vI3skZmlsZW5hbWV9LSN7JHR5cGV9LnR0Zj92PSN7JHZlcnNpb259XCIpIGZvcm1hdChcInRydWV0eXBlXCIpO1xufVxuXG4vLyBCZWxvdyBhcmUgZXhhbXBsZXNcbi8vICRBdmVydGFGYW1pbHk6ICdBdmVydGEnO1xuLy8gJEF2ZXJ0YVZlcnNpb246ICcxLjAnO1xuLy8gJEF2ZXJ0YVBhdGg6IFwiQXZlcnRhXCI7XG4vLyAkcmVndWxhcmZvbnQ6IDQwMDtcbi8vICRzZW1pYm9sZGZvbnQ6IDUwMDtcbi8vICRib2xkZm9udDogNjAwO1xuLy9cbi8vQGZvbnQtZmFjZSB7XG4vLyAgZm9udC1mYW1pbHk6ICRBdmVydGFGYW1pbHk7XG4vLyAgZm9udC1kaXNwbGF5OiBhdXRvO1xuLy8gIEBpbmNsdWRlIGZvbnRkZWYoJEF2ZXJ0YVBhdGgsICRBdmVydGFGYW1pbHksICRBdmVydGFWZXJzaW9uLCBcIlJlZ3VsYXJcIik7XG4vLyAgZm9udC13ZWlnaHQ6ICRyZWd1bGFyZm9udDtcbi8vfVxuLy9AZm9udC1mYWNlIHtcbi8vICBmb250LWZhbWlseTogJEF2ZXJ0YUZhbWlseTtcbi8vICBmb250LWRpc3BsYXk6IGF1dG87XG4vLyAgQGluY2x1ZGUgZm9udGRlZigkQXZlcnRhUGF0aCwgJEF2ZXJ0YUZhbWlseSwgJEF2ZXJ0YVZlcnNpb24sIFwiU2VtaWJvbGRcIik7XG4vLyAgZm9udC13ZWlnaHQ6ICRzZW1pYm9sZGZvbnQ7XG4vL31cbi8vQGZvbnQtZmFjZSB7XG4vLyAgZm9udC1mYW1pbHk6ICRBdmVydGFGYW1pbHk7XG4vLyAgZm9udC1kaXNwbGF5OiBhdXRvO1xuLy8gIEBpbmNsdWRlIGZvbnRkZWYoJEF2ZXJ0YVBhdGgsICRBdmVydGFGYW1pbHksICRBdmVydGFWZXJzaW9uLCBcIkJvbGRcIik7XG4vLyAgZm9udC13ZWlnaHQ6ICRib2xkZm9udDtcbi8vfVxuXG4kZm9udC1mYW1pbHktc2Fucy1zZXJpZjogSGVsdmV0aWNhLCBBcmlhbCwgc2Fucy1zZXJpZjtcbiRmb250LWZhbWlseS1zZXJpZjogR2VvcmdpYSwgJ1RpbWVzIE5ldyBSb21hbicsIHNlcmlmO1xuXG5cblxuJGZvbnRfX21haW46ICRmb250LWZhbWlseS1zYW5zLXNlcmlmO1xuJGZvbnRfX2NvZGU6IEFyaWFsLCBcIkhlbHZldGljYSBOZXVlXCIsIEhlbHZldGljYSwgc2Fucy1zZXJpZjtcbiRmb250X19wcmU6IFwiQ291cmllciAxMCBQaXRjaFwiLCBDb3VyaWVyLCBtb25vc3BhY2U7XG4kZm9udF9fbGluZS1oZWlnaHQtYm9keTogMS41O1xuJGZvbnRfX2xpbmUtaGVpZ2h0LXByZTogMS42O1xuXG4kYmFzZV9mb250X3NpemU6IDE2cHg7XG4kZm9udF9mYW1pbHk6ICRmb250LWZhbWlseS1zYW5zLXNlcmlmO1xuJGZvbnRfZmFtaWx5X21lbnU6ICRmb250LWZhbWlseS1zYW5zLXNlcmlmO1xuJGZvbnRfZmFtaWx5X2hlYWRpbmdzOiAkZm9udC1mYW1pbHktc2VyaWY7XG5cblxuJGVhc2luZzogZWFzZS1vdXQ7XG5cbi8vIFBYIHRvIEVNL1JFTSAtIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL2lzZWxsc29hcC84Mjk5NzI2XG5cbiRiYXNlLWZvbnQtc2l6ZTogJGJhc2VfZm9udF9zaXplO1xuXG4vKipcbiAqIFN0cmlwcyB0aGUgdW5pdCBmcm9tIGEgZ2l2ZW4gbnVtYmVyLXVuaXQtY29tYmluYXRpb24gYW5kIHJldHVybnMgdGhlIG51bWJlci5cbiAqIEBsaW5rOiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8xMjMzNTg0MS8xNzc5OTk5XG4gKiBAdXNhZ2U6IHBhcnNlLWludCgxMHB4KSA9PiAxMFxuICovXG5cbkBmdW5jdGlvbiBwYXJzZS1pbnQoJG51bWJlcikge1xuICBAcmV0dXJuICRudW1iZXIgLyAoJG51bWJlciAqIDAgKyAxKTtcbn1cblxuLyoqXG4gKiBTaW1wbHkgYWRkcyB0aGUgZW0gdW5pdCB0byBhIGdpdmVuIG51bWJlci4gVGhpcyBpcyB1c2VkIHR3aWNlIGluIHRoZVxuICogZnVuY3Rpb24gdW5kZXJuZWF0aCwgdGh1cyB0aGUgbmVlZCBmb3IgYSBzZXBhcmF0ZSBmdW5jdGlvbi5cbiAqL1xuXG5AZnVuY3Rpb24gYWRkLWVtLXVuaXQoJG51bWJlcikge1xuICBAcmV0dXJuICRudW1iZXIgKiAxZW07XG59XG5cbi8qKlxuICogQ2FsY3VsYXRlcyBlbSB2YWx1ZXMgZm9yIGEgZ2l2ZW4gbGlzdCBvZiAocHggb3IgZW0pIHZhbHVlcyBhbmQgYSBnaXZlbiBlbVxuICogYmFzZS4gTXVsdGlwbHkgYmFzZSB2YWx1ZXMgZm9yIG5lc3RlZCBlbSBzdHJ1Y3R1cmVzIChsYXN0IEB1c2FnZSBleGFtcGxlKS5cbiAqIEB1c2FnZTogZW0oMTBweCwgMS4xMjUpID0+IC41NTU1NmVtXG4gKiAgICAgICAgIGVtKDI0cHgsIC44NzVlbSkgPT4gMS43MTQyOWVtXG4gKiAgICAgICAgIGVtKDEycHggMCA3ZW0gcmdiYSgwLCAwLCAwLCAuNyksIDEuNzUpID0+IC40Mjg1N2VtIDAgNGVtIHJnYmEoMCwgMCwgMCwgMC43KVxuICogICAgICAgICBlbSgxMnB4KSArIGVtKDNlbSkgPT4gMy43NWVtXG4gKiAgICAgICAgIGVtKDIzcHgsIGVtKDUzcHgpKSA9PiAuNDMzOTZlbVxuICogICAgICAgICBlbSgyNHB4LCAxLjUgKiAxLjEyNSkgPT4gLjg4ODg5ZW1cbiAqL1xuXG5AZnVuY3Rpb24gZW0oJHZhbHVlcywgJGVtLWJhc2U6IDEpIHtcbiAgJGJhc2UtZm9udC1zaXplOiBwYXJzZS1pbnQoJGJhc2UtZm9udC1zaXplKTtcbiAgJGVtLWJhc2U6IHBhcnNlLWludCgkZW0tYmFzZSk7XG4gICRyZXN1bHQ6ICgpO1xuXG4gIEBlYWNoICR2YWx1ZSBpbiAkdmFsdWVzIHtcbiAgICBAaWYgJHZhbHVlID09IDAgb3IgdHlwZS1vZigkdmFsdWUpICE9IFwibnVtYmVyXCIge1xuICAgICAgJHJlc3VsdDogYXBwZW5kKCRyZXN1bHQsICR2YWx1ZSk7XG4gICAgfSBAZWxzZSB7XG4gICAgICAkdW5pdDogdW5pdCgkdmFsdWUpO1xuICAgICAgJHZhbHVlOiBwYXJzZS1pbnQoJHZhbHVlKTtcblxuICAgICAgQGlmICR1bml0ID09IFwicHhcIiB7XG4gICAgICAgICRyZXN1bHQ6IGFwcGVuZCgkcmVzdWx0LCBhZGQtZW0tdW5pdCgkdmFsdWUgLyAoJGJhc2UtZm9udC1zaXplICogJGVtLWJhc2UpKSk7XG4gICAgICB9IEBlbHNlIGlmICR1bml0ID09IFwiZW1cIiB7XG4gICAgICAgICRyZXN1bHQ6IGFwcGVuZCgkcmVzdWx0LCBhZGQtZW0tdW5pdCgkdmFsdWUgLyAkZW0tYmFzZSkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBJZiBvbmx5IG9uZSB2YWx1ZSBpcyBwcm92aWRlZCwgb3V0cHV0IHRoZSBpbnN0YW5jZSBvZiB0aGF0IG9iamVjdCBpbnN0ZWFkXG4gICAqIG9mIHRoZSB3aG9sZSBsaXN0LiBUaGlzIGVuYWJsZXMgdXNlIGNhc2VzIGxpa2UgbmVzdGVkIGZ1bmN0aW9uIGludm9jYXRpb25zXG4gICAqIChlLmcuIGBlbSgycHgsIGVtKDE1cHgpKWApIG9yIGFkZGl0aW9ucy9zdWJ0cmFjdGlvbnMgKGUuZy4gYGVtKDVweCkgKyBlbSgzMnB4KWApLlxuICAgKi9cbiAgQGlmIGxlbmd0aCgkcmVzdWx0KSA9PSAxIHtcbiAgICBAcmV0dXJuIG50aCgkcmVzdWx0LCAxKTtcbiAgfSBAZWxzZSB7XG4gICAgQHJldHVybiAkcmVzdWx0O1xuICB9XG59XG5cblxuXG5cblxuIiwiLyoqXG4gKiBTdHJpcHMgdGhlIHVuaXQgZnJvbSBhIGdpdmVuIG51bWJlci11bml0LWNvbWJpbmF0aW9uIGFuZCByZXR1cm5zIHRoZSBudW1iZXIuXG4gKiBAbGluazogaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMTIzMzU4NDEvMTc3OTk5OVxuICogQHVzYWdlOiBwYXJzZS1pbnQoMTBweCkgPT4gMTBcbiAqL1xuLyoqXG4gKiBTaW1wbHkgYWRkcyB0aGUgZW0gdW5pdCB0byBhIGdpdmVuIG51bWJlci4gVGhpcyBpcyB1c2VkIHR3aWNlIGluIHRoZVxuICogZnVuY3Rpb24gdW5kZXJuZWF0aCwgdGh1cyB0aGUgbmVlZCBmb3IgYSBzZXBhcmF0ZSBmdW5jdGlvbi5cbiAqL1xuLyoqXG4gKiBDYWxjdWxhdGVzIGVtIHZhbHVlcyBmb3IgYSBnaXZlbiBsaXN0IG9mIChweCBvciBlbSkgdmFsdWVzIGFuZCBhIGdpdmVuIGVtXG4gKiBiYXNlLiBNdWx0aXBseSBiYXNlIHZhbHVlcyBmb3IgbmVzdGVkIGVtIHN0cnVjdHVyZXMgKGxhc3QgQHVzYWdlIGV4YW1wbGUpLlxuICogQHVzYWdlOiBlbSgxMHB4LCAxLjEyNSkgPT4gLjU1NTU2ZW1cbiAqICAgICAgICAgZW0oMjRweCwgLjg3NWVtKSA9PiAxLjcxNDI5ZW1cbiAqICAgICAgICAgZW0oMTJweCAwIDdlbSByZ2JhKDAsIDAsIDAsIC43KSwgMS43NSkgPT4gLjQyODU3ZW0gMCA0ZW0gcmdiYSgwLCAwLCAwLCAwLjcpXG4gKiAgICAgICAgIGVtKDEycHgpICsgZW0oM2VtKSA9PiAzLjc1ZW1cbiAqICAgICAgICAgZW0oMjNweCwgZW0oNTNweCkpID0+IC40MzM5NmVtXG4gKiAgICAgICAgIGVtKDI0cHgsIDEuNSAqIDEuMTI1KSA9PiAuODg4ODllbVxuICovXG4uYmxvY2stZXhhbXBsZSB7XG4gIGJhY2tncm91bmQ6ICMwRUM5OTc7IH1cbiIsIi8vSW5jbHVkZSBTaGFyZWQgdmFyaWFibGVzL21peGlucy9zdHlsZXMgd2l0aCB0aGUgbWFpbiBTdHlsZXMgb2YgdGhlIHNpdGVcbkBpbXBvcnQgXCJzaGFyZWRcIjtcblxuLmJsb2NrLWV4YW1wbGV7XG4gIGJhY2tncm91bmQ6ICRncmVlbjtcbn0iLCIkY29sb3JfX2JhY2tncm91bmQtYm9keTogI2ZmZjtcbiRjb2xvcl9fYmFja2dyb3VuZC1zY3JlZW46ICNmMWYxZjE7XG4kY29sb3JfX2JhY2tncm91bmQtaHI6ICNjY2M7XG4kY29sb3JfX2JhY2tncm91bmQtYnV0dG9uOiAjZTZlNmU2O1xuJGNvbG9yX19iYWNrZ3JvdW5kLXByZTogI2VlZTtcbiRjb2xvcl9fYmFja2dyb3VuZC1pbnM6ICNmZmY5YzA7XG5cblxuJGNvbG9yX190ZXh0LW1haW46ICM0MDQwNDA7XG5cbiRjb2xvcl9fdGV4dC1zY3JlZW46ICMyMTc1OWI7XG4kY29sb3JfX3RleHQtaW5wdXQ6ICM2NjY7XG4kY29sb3JfX3RleHQtaW5wdXQtZm9jdXM6ICMxMTE7XG5cbiRjb2xvcl9fbGluazogIzJFQkFFQztcbiRjb2xvcl9fbGluay12aXNpdGVkOiByZ2JhKDQ2LDE4NiwyMzYsLjE3KTtcbiRjb2xvcl9fbGluay1ob3ZlcjogIzI0OTRCQztcblxuXG4kY29sb3JfX2JvcmRlci1idXR0b246ICNjY2MgI2NjYyAjYmJiO1xuJGNvbG9yX19ib3JkZXItYnV0dG9uLWhvdmVyOiAjY2NjICNiYmIgI2FhYTtcbiRjb2xvcl9fYm9yZGVyLWJ1dHRvbi1mb2N1czogI2FhYSAjYmJiICNiYmI7XG4kY29sb3JfX2JvcmRlci1pbnB1dDogI2NjYztcbiRjb2xvcl9fYm9yZGVyLWFiYnI6ICM2NjY7XG5cbiRibHVlOiAjMkVCQUVDO1xuJGJsdWVfb3BhYzogcmdiYSg0NiwxODYsMjM2LC4xNyk7XG4kYmx1ZV9tZW51OiByZ2JhKDQ2LDE4NiwyMzYsLjUwKTtcblxuJGdyZWVuOiAjMEVDOTk3O1xuJGRhcmtibHVlOiAjMTQyMzJGO1xuJGJvcmRlcl9jb2xvcjogI0VBRUFFQTtcbiRsaWdodGdyYXk6ICNGN0Y3Rjc7XG5cbiRibHVlX2FpcjogIzY1OERBRDsiXX0= */
