//  Fonts and icons
//  -----------------------------

// Mixin for adding custom fonts in the dir /fonts/fontfoldername/font-regular
// example /fonts/averta/averta-bold.woff
// example /fonts/averta/averta-regular.woff

@mixin fontdef($path, $filename, $version, $type: "Regular") {
  src: url("../fonts/#{$path}/#{$filename}-#{$type}.eot?#iefix&v=#{$version}")
      format("embedded-opentype"),
    url("../fonts/#{$path}/#{$filename}-#{$type}.woff?v=#{$version}")
      format("woff"),
    url("../fonts/#{$path}/#{$filename}-#{$type}.ttf?v=#{$version}")
      format("truetype");
}

// Below are examples
// $AvertaFamily: 'Averta';
// $AvertaVersion: '1.0';
// $AvertaPath: "Averta";
// $regularfont: 400;
// $semiboldfont: 500;
// $boldfont: 600;
//
//@font-face {
//  font-family: $AvertaFamily;
//  font-display: auto;
//  @include fontdef($AvertaPath, $AvertaFamily, $AvertaVersion, "Regular");
//  font-weight: $regularfont;
//}
//@font-face {
//  font-family: $AvertaFamily;
//  font-display: auto;
//  @include fontdef($AvertaPath, $AvertaFamily, $AvertaVersion, "Semibold");
//  font-weight: $semiboldfont;
//}
//@font-face {
//  font-family: $AvertaFamily;
//  font-display: auto;
//  @include fontdef($AvertaPath, $AvertaFamily, $AvertaVersion, "Bold");
//  font-weight: $boldfont;
//}

/* lato-regular - latin */
@font-face {
  font-family: "Lato";
  font-style: normal;
  font-weight: 400;
  src: url("../fonts/lato-v17-latin-regular.eot"); /* IE9 Compat Modes */
  src: local(""),
    url("../fonts/lato-v17-latin-regular.eot?#iefix")
      format("embedded-opentype"),
    /* IE6-IE8 */ url("../fonts/lato-v17-latin-regular.woff2") format("woff2"),
    /* Super Modern Browsers */ url("../fonts/lato-v17-latin-regular.woff")
      format("woff"),
    /* Modern Browsers */ url("../fonts/lato-v17-latin-regular.ttf")
      format("truetype"),
    /* Safari, Android, iOS */ url("../fonts/lato-v17-latin-regular.svg#Lato")
      format("svg"); /* Legacy iOS */
}
@font-face {
  font-family: "Lato";
  src: url("../fonts/lato-medium-webfont.eot");
  src: url("../fonts/lato-medium-webfont.eot?#iefix")
      format("embedded-opentype"),
    url("../fonts/lato-medium-webfont.woff2") format("woff2"),
    url("../fonts/lato-medium-webfont.woff") format("woff"),
    url("../fonts/lato-medium-webfont.ttf") format("truetype"),
    url("../fonts/lato-medium-webfont.svg#latomedium") format("svg");
  font-weight: 500;
  font-style: normal;
}
/* lato-700 - latin */
@font-face {
  font-family: "Lato";
  font-style: normal;
  font-weight: 700;
  src: url("../fonts/lato-v17-latin-700.eot"); /* IE9 Compat Modes */
  src: local(""),
    url("../fonts/lato-v17-latin-700.eot?#iefix") format("embedded-opentype"),
    /* IE6-IE8 */ url("../fonts/lato-v17-latin-700.woff2") format("woff2"),
    /* Super Modern Browsers */ url("../fonts/lato-v17-latin-700.woff")
      format("woff"),
    /* Modern Browsers */ url("../fonts/lato-v17-latin-700.ttf")
      format("truetype"),
    /* Safari, Android, iOS */ url("../fonts/lato-v17-latin-700.svg#Lato")
      format("svg"); /* Legacy iOS */
}
/* lato-900 - latin */
@font-face {
  font-family: "Lato";
  font-style: normal;
  font-weight: 900;
  src: url("../fonts/lato-v17-latin-900.eot"); /* IE9 Compat Modes */
  src: local(""),
    url("../fonts/lato-v17-latin-900.eot?#iefix") format("embedded-opentype"),
    /* IE6-IE8 */ url("../fonts/lato-v17-latin-900.woff2") format("woff2"),
    /* Super Modern Browsers */ url("../fonts/lato-v17-latin-900.woff")
      format("woff"),
    /* Modern Browsers */ url("../fonts/lato-v17-latin-900.ttf")
      format("truetype"),
    /* Safari, Android, iOS */ url("../fonts/lato-v17-latin-900.svg#Lato")
      format("svg"); /* Legacy iOS */
}

/* poppins-regular - latin */
@font-face {
  font-display: swap; /* Check https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/font-display for other options. */
  font-family: "Poppins";
  font-style: normal;
  font-weight: 400;
  src: url("../fonts/poppins-v21-latin-regular.woff2") format("woff2"); /* Chrome 36+, Opera 23+, Firefox 39+, Safari 12+, iOS 10+ */
}
/* poppins-500 - latin */
@font-face {
  font-display: swap; /* Check https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/font-display for other options. */
  font-family: "Poppins";
  font-style: normal;
  font-weight: 500;
  src: url("../fonts/poppins-v21-latin-500.woff2") format("woff2"); /* Chrome 36+, Opera 23+, Firefox 39+, Safari 12+, iOS 10+ */
}
/* poppins-700 - latin */
@font-face {
  font-display: swap; /* Check https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/font-display for other options. */
  font-family: "Poppins";
  font-style: normal;
  font-weight: 700;
  src: url("../fonts/poppins-v21-latin-700.woff2") format("woff2"); /* Chrome 36+, Opera 23+, Firefox 39+, Safari 12+, iOS 10+ */
}

/* poppins-regular - latin */
@font-face {
  font-display: swap; /* Check https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/font-display for other options. */
  font-family: "Poppins";
  font-style: normal;
  font-weight: 400;
  src: url("../fonts/poppins-v21-latin-regular.woff2") format("woff2"); /* Chrome 36+, Opera 23+, Firefox 39+, Safari 12+, iOS 10+ */
}
/* poppins-500 - latin */
@font-face {
  font-display: swap; /* Check https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/font-display for other options. */
  font-family: "Poppins";
  font-style: normal;
  font-weight: 500;
  src: url("../fonts/poppins-v21-latin-500.woff2") format("woff2"); /* Chrome 36+, Opera 23+, Firefox 39+, Safari 12+, iOS 10+ */
}
/* poppins-600 - latin */
@font-face {
  font-display: swap; /* Check https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/font-display for other options. */
  font-family: "Poppins";
  font-style: normal;
  font-weight: 600;
  src: url("../fonts/poppins-v21-latin-600.woff2") format("woff2"); /* Chrome 36+, Opera 23+, Firefox 39+, Safari 12+, iOS 10+ */
}
/* poppins-700 - latin */
@font-face {
  font-display: swap; /* Check https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/font-display for other options. */
  font-family: "Poppins";
  font-style: normal;
  font-weight: 700;
  src: url("../fonts/poppins-v21-latin-700.woff2") format("woff2"); /* Chrome 36+, Opera 23+, Firefox 39+, Safari 12+, iOS 10+ */
}
/* poppins-800 - latin */
@font-face {
  font-display: swap; /* Check https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/font-display for other options. */
  font-family: "Poppins";
  font-style: normal;
  font-weight: 800;
  src: url("../fonts/poppins-v21-latin-800.woff2") format("woff2"); /* Chrome 36+, Opera 23+, Firefox 39+, Safari 12+, iOS 10+ */
}

// Used mainly for Gutenberg font-sizes
//Desktop
$font-size-xs: rem(12);
$font-size-s: rem(14);
$font-size-d: rem(16);
$font-size-m: rem(20);
$font-size-l: rem(24);
$font-size-xl: rem(30);
$font-size-xxl: rem(44);
$font-size-xxxl: rem(52);

//Mobile Gutenberg font-sizes
$font-size-xs-mobile: rem(10);
$font-size-s-mobile: rem(14);
$font-size-d-mobile: rem(16);
$font-size-m-mobile: rem(18);
$font-size-l-mobile: rem(22);
$font-size-xl-mobile: rem(24);
$font-size-xxl-mobile: rem(28);
$font-size-xxxl-mobile: rem(38);

//Tablet Gutenberg font-sizes  (Maybe leave same as mobile for starters)
$font-size-xs-tablet: rem(10);
$font-size-s-tablet: rem(14);
$font-size-d-tablet: rem(16);
$font-size-m-tablet: rem(18);
$font-size-l-tablet: rem(22);
$font-size-xl-tablet: rem(28);
$font-size-xxl-tablet: rem(32);
$font-size-xxxl-tablet: rem(36);

$font-family-sans-serif: "Poppins", "Lato", Arial, sans-serif;
$font-family-serif: Georgia, "Times New Roman", serif;

$font__main: $font-family-sans-serif;
$font__code: Arial, "Helvetica Neue", Helvetica, sans-serif;
$font__pre: "Courier 10 Pitch", Courier, monospace;
$font__line-height-body: 1.5;
$font__line-height-pre: 1.6;

$base_font_size: 16px;
$font_family: $font-family-sans-serif;
$font_family_menu: $font-family-sans-serif;
$font_family_headings: $font-family-sans-serif;

$easing: ease-out;

// PX to EM/REM - https://gist.github.com/isellsoap/8299726

$base-font-size: $base_font_size;

/**
 * Strips the unit from a given number-unit-combination and returns the number.
 * @link: http://stackoverflow.com/a/12335841/1779999
 * @usage: parse-int(10px) => 10
 */

@function parse-int($number) {
  @return $number / ($number * 0 + 1);
}

/**
 * Simply adds the em unit to a given number. This is used twice in the
 * function underneath, thus the need for a separate function.
 */

@function add-em-unit($number) {
  @return $number * 1em;
}

@function add-rem-unit($number) {
  @return $number * 1rem;
}

/**
 * Calculates em values for a given list of (px or em) values and a given em
 * base. Multiply base values for nested em structures (last @usage example).
 * @usage: em(10px, 1.125) => .55556em
 *         em(24px, .875em) => 1.71429em
 *         em(12px 0 7em rgba(0, 0, 0, .7), 1.75) => .42857em 0 4em rgba(0, 0, 0, 0.7)
 *         em(12px) + em(3em) => 3.75em
 *         em(23px, em(53px)) => .43396em
 *         em(24px, 1.5 * 1.125) => .88889em
 */

@function em($values, $em-base: 1) {
  $base-font-size: parse-int($base-font-size);
  $em-base: parse-int($em-base);
  $result: ();

  @each $value in $values {
    @if $value == 0 or type-of($value) != "number" {
      $result: append($result, $value);
    } @else {
      $unit: unit($value);
      $value: parse-int($value);

      @if $unit == "px" {
        $result: append(
          $result,
          add-em-unit($value / ($base-font-size * $em-base))
        );
      } @else if $unit == "em" {
        $result: append($result, add-em-unit($value / $em-base));
      } @else if $unit == "" {
        $result: append(
          $result,
          add-em-unit($value / ($base-font-size * $em-base))
        );
      }
    }
  }

  /**
   * If only one value is provided, output the instance of that object instead
   * of the whole list. This enables use cases like nested function invocations
   * (e.g. `em(2px, em(15px))`) or additions/subtractions (e.g. `em(5px) + em(32px)`).
   */
  @if length($result) == 1 {
    @return nth($result, 1);
  } @else {
    @return $result;
  }
}

@function rem($values, $em-base: 1) {
  $base-font-size: parse-int($base-font-size);
  $em-base: parse-int($em-base);
  $result: ();

  @each $value in $values {
    @if $value == 0 or type-of($value) != "number" {
      $result: append($result, $value);
    } @else {
      $unit: unit($value);
      $value: parse-int($value);

      @if $unit == "px" {
        $result: append(
          $result,
          add-rem-unit($value / ($base-font-size * $em-base))
        );
      } @else if $unit == "em" {
        $result: append($result, add-rem-unit($value / $em-base));
      } @else if $unit == "" {
        $result: append(
          $result,
          add-rem-unit($value / ($base-font-size * $em-base))
        );
      }
    }
  }

  /**
   * If only one value is provided, output the instance of that object instead
   * of the whole list. This enables use cases like nested function invocations
   * (e.g. `em(2px, em(15px))`) or additions/subtractions (e.g. `em(5px) + em(32px)`).
   */
  @if length($result) == 1 {
    @return nth($result, 1);
  } @else {
    @return $result;
  }
}
